name: Go

on:
  push:
    branches: [ main ]
    paths:
      - '**.go'
      - 'go.mod'
      - '.golangci.yml'
      - '.github/workflows/go.yml'
  pull_request_target:
    types: ["opened", "synchronize"]
    paths:
      - '**.go'
      - 'go.mod'
      - '.golangci.yml'
      - '.github/workflows/go.yml'

env:
  GOPROXY: "https://proxy.golang.org"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=30m
      - name: Check Go module tidiness
        shell: bash
        run: |
          go mod tidy
          STATUS=$(git status --porcelain go.mod go.sum)
          if [ ! -z "$STATUS" ]; then
            echo "Running go mod tidy modified go.mod and/or go.sum"
            exit 1
          fi
  test:
    name: Test
    strategy:
      matrix:
        go-version: [ 1.16.x, 1.17.x, 1.18.x, 1.19.x ]
#        platform: [ ubuntu-latest, macos-latest, windows-latest ]
        platform: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Cache go mod and go build
        uses: actions/cache@v3
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~\AppData\Local\go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Init build env variables
        shell: bash
        run: |
          echo "VERSION_VERSION=$(git log --date=iso --pretty=format:"%cd" -1) $(git describe --tags --always)" >> $GITHUB_ENV
          echo "VERSION_COMPILE=$(date +"%F %T %z") by $(go version)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "VERSION_GIT_DIRTY=$(git diff --no-ext-diff 2>/dev/null | wc -l | awk '{print $1}')" >> $GITHUB_ENV
          echo "VERSION_DEV_PATH=$(pwd)" >> $GITHUB_ENV
          echo "GOPATH=$(go env GOPATH)"
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: build --rm-dist --single-target --snapshot --output ./soar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_VERSION: ${{ env.VERSION_VERSION }}
          VERSION_COMPILE: ${{ env.VERSION_COMPILE }}
          VERSION_BRANCH: ${{ env.VERSION_BRANCH }}
          VERSION_GIT_DIRTY: ${{ env.VERSION_GIT_DIRTY }}
          VERSION_DEV_PATH: ${{ env.VERSION_DEV_PATH }}
          GOPATH: ${{ env.GOPATH }}
      - name: Run docker
        run: make docker
        env:
          MYSQL_VERSION: 8.0.27
        if: ${{ matrix.platform == 'ubuntu-latest' }}
      - name: Run tests with coverage
        run: make cover
      - name: Run cli tests
        shell: bash
        run: npm i -g bats && mkdir -p ./bin && mv ./soar ./bin/ && bats ./test
        if: ${{ matrix.platform == 'ubuntu-latest' }}
      - name: Report results to Codecov
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage
      - name: Report results to DeepSource
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: |
          curl https://deepsource.io/cli | sh
          ./bin/deepsource report --analyzer test-coverage --key go --value-file ./coverage
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
